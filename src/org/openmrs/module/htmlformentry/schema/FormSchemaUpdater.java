package org.openmrs.module.htmlformentry.schema;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.openmrs.Field;
import org.openmrs.FieldType;
import org.openmrs.Form;
import org.openmrs.api.context.Context;
import org.openmrs.module.htmlformentry.FormEntrySession;
import org.openmrs.module.htmlformentry.HtmlForm;
import org.openmrs.module.htmlformentry.HtmlFormEntryUtil;


/**
 * This class is responsible for updating the core OpenMRS Form Schema,
 * when saving an HTML Form
 * @author jportela
 *
 */
public class FormSchemaUpdater {
	
	private HtmlForm htmlForm;
	private Field obsSection = null;
	private Field patientSection = null;
	private Field encounterSection = null;
	
    protected final Log log = LogFactory.getLog(getClass());
	
	public FormSchemaUpdater(HtmlForm form) {
		htmlForm = form;
	}
	
	/** Updates the Core OpenMRS Schema
	 * To be called on HtmlFormEntryServiceImpl.saveHtmlForm
	 */
	public void updateSchema() {
		
		//Retrieves the FormEntrySession
		FormEntrySession session = null;
		try {
			session = new FormEntrySession(HtmlFormEntryUtil.getFakePerson(), htmlForm);
		} catch (Exception e) {	//TODO: Better exception handling
			e.printStackTrace();
		}
        		
        HtmlFormSchema schema = session.getContext().getSchema();	//contains the html form schema
        List <HtmlFormSection> sections = schema.getSections();		//gets a list with all sections of the Html Form
        
        Form form = htmlForm.getForm();		//gets the core OpenMRS Form
        
        findOrCreateDefaultSections();
        
        //iterates through the sections
        handleSections(sections);
	}
	
	/**
	 * Retrieves the Default sections from the Data Model
	 * If they cannot be found, it will automatically create
	 * new sections on the Data Model
	 */
	private void findOrCreateDefaultSections()
	{
		if (!findDefaultSections())
			createDefaultSections();
	}
	
	/**
	 * Retrieves the OBS, PATIENT and ENCOUNTER sections from the
	 * Data Model
	 * @return true if all sections were found
	 * 
	 * TODO: There's probably a better way for finding the elements
	 * instead of iterating through the list of all fields
	 */
	private boolean findDefaultSections() {
		List<Field> fields = Context.getFormService().getAllFields();
		
		for (Field field : fields) {
			if (field.getName().equals("OBS"))
				obsSection = field;
			else if (field.getName().equals("PATIENT"))
				patientSection = field;
			else if (field.getName().equals("ENCOUNTER"))
				encounterSection = field;
			if (!(obsSection == null || patientSection == null || encounterSection == null))
				return true;
		}
		
		return false;
	}
	
	/**
	 * Creates the Default Sections in the Data Model (OBS,
	 * PATIENT, ENCOUNTER), if they were not found
	 */
	private void createDefaultSections() {
		
		List<FieldType> types = Context.getFormService().getAllFieldTypes();
		FieldType sectionType = null;
		
		//retrieves the Section field type
		for (FieldType type : types) {
			if (type.getName().equals("Section")) {
				sectionType = type;
				break;
			}
		}
		
		//if it could not be found, create a new one
		if (sectionType == null) {
			sectionType = new FieldType();
			sectionType.setName("Section");
			sectionType.setDescription("Section. Generated by HtmlFormEntry module");
			sectionType.setIsSet(true);
			Context.getFormService().saveFieldType(sectionType);
		}
		
		/*	creates each section
		 *	if the section is null it means that it wasn't found by
		 *	the findDefaulSections() method
		 */
		if (obsSection == null) {
			//FIXME it isn't a section, it's a concept in Basic Form....
			obsSection = new Field();
			obsSection.setName("OBS");
			obsSection.setDescription("OBS. Generated by HtmlFormEntry module");
			obsSection.setFieldType(sectionType);
			Context.getFormService().saveField(obsSection);
		}
		
		if (patientSection == null) {
			patientSection = new Field();
			patientSection.setName("PATIENT");
			patientSection.setDescription("PATIENT. Generated by HtmlFormEntry module");
			patientSection.setFieldType(sectionType);
			Context.getFormService().saveField(patientSection);
		}
		
		if (encounterSection == null) {
			encounterSection = new Field();
			encounterSection.setName("ENCOUNTER");
			encounterSection.setDescription("ENCOUNTER. Generated by HtmlFormEntry module");
			encounterSection.setFieldType(sectionType);
			Context.getFormService().saveField(encounterSection);
		}
		
	}
	
	public void handleSections(List<HtmlFormSection> sections) {
		for (int i = 0; i < sections.size(); i++) {
        	
        	//this should add the sections to their place in the form schema
        	//keep in mind that <obs> tags should go into an OBS section, 
        	//and all the other "special" sections (PATIENT, ENCOUNTER)
        	
        	HtmlFormSection section = sections.get(i);
        	handleSection(section);
        }
	}
	
	public void handleSection(HtmlFormSection section) {
		List<HtmlFormField> fields = section.getFields();
		List<HtmlFormSection> sections = section.getSections();
		
		log.info("HtmlFormSection " + section.getName() + " | " + fields.size() + " fields | " + sections.size() + " sections.");
		
		handleSections(sections);
		
		for (int i = 0; i < fields.size(); i++) {
			handleField(fields.get(i));
		}
	}
	
	public void handleField(HtmlFormField field) {
		if (field instanceof ObsField) {
    		ObsField obsField = (ObsField) field;
    		log.info("ObsField - " + obsField.getQuestion().getName() + " - ConceptID: " + obsField.getQuestion().getId());
    	}
	}

}
