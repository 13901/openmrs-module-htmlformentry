package org.openmrs.module.htmlformentry.handler;

import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

import org.openmrs.api.context.Context;
import org.openmrs.module.htmlformentry.BadFormDesignException;
import org.openmrs.module.htmlformentry.FormEntryContext;
import org.openmrs.module.htmlformentry.FormEntrySession;
import org.openmrs.module.htmlformentry.FormEntryContext.Mode;
import org.openmrs.module.htmlformentry.element.MultipleElement;
import org.openmrs.module.htmlformentry.schema.MultipleGroup;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

/***
 * Handles the <newrepeat> tag
 */
public class MultipleHandler implements TagHandler {

	/***
	 * 1)let the formentrysession know we're out of a repeat tag
	 */
	@Override
	public void doEndTag(FormEntrySession session, PrintWriter out,
			Node parent, Node node) {

		out.print(this.getEndSubstitution(session));

		session.getContext().endNewRepeatGroup();
	}

	/**
	 * Handles the start tag for a newrepeat tag type.
	 * 
	 * Purpose 1)Generates the appropriate HTML i.e. if input <newrepeat>
	 * <template> <obs conceptid = "123" /> </template> </newrepeat>
	 * 
	 * output should be: <span> <jquery that handles the copy template and
	 * insert the template after rp1>
	 * 
	 * <!-- part of the html/obs that is used as template, will be hidden/>
	 * <span id="template" > htmlgenerated by the obs constrol 123 </span>
	 * 
	 * <!-- part of the html which is gona be generated by exsiting concept id/>
	 * <span id="exsitingobs" > htmlgenerated by the obs constrol 123 </span>
	 * 
	 * <!-- part of the html/obs that is generated by jquery /> <span id="rp1" >
	 * htmlgenerated by the obs constrol jquery that delete this span of control
	 * </span>
	 * 
	 * </span> and adds it to the associated PrintWriter.
	 * 
	 * purpose2: let the formentrysession know we're in a newrepeat tag
	 * 
	 * Also adds any necessary FormSubmissionControllerActions to the
	 * FormSubmissionController associated with the session. Returns whether or
	 * not to handle the body also. (True = Yes)
	 * 
	 * @param session
	 *            the current session
	 * @param out
	 *            the PrintWriter to append generated HTML to
	 * @param parent
	 *            the parent node of the node in the XML associated with this
	 *            tag
	 * @param node
	 *            the node in the XML associated with this tag
	 * @return true/false whether to handle the body
	 */
	@Override
	public boolean doStartTag(FormEntrySession session, PrintWriter out,
			Node parent, Node node) {
		
		int minOccur, maxOccur;

		/* notify the context that we are starting a repeater */
		FormEntryContext context = session.getContext();
		context.beginNewRepeatGroup();

		/*
		 * we will generate the multipe template by java code let 0 as flag
		 */
		context.zeroNewrepeatTimesSeqVal();

		Map<String, String> attributes = new HashMap<String, String>();
		NamedNodeMap map = node.getAttributes();
		for (int i = 0; i < map.getLength(); ++i) {
			Node attribute = map.item(i);
			if ("addLabel".equals(attribute.getNodeName())) {
				context.getExistingRptGroups().get(
						context.getNewrepeatSeqVal() - 1).setLabel(
						attribute.getNodeValue());
			} else if ("minOccurs".equals(attribute.getNodeName())) {
				try {
					minOccur = Integer.parseInt(attribute.getNodeValue());
				} catch (Exception ex) {
					throw new IllegalArgumentException(
							"minOccurs has to be an integer!");
				}
					if (minOccur < 0)
						throw new IllegalArgumentException(
								"minOccurs has to be an integer greater than 0");
					context.getExistingRptGroups().get(
							context.getNewrepeatSeqVal() - 1).setMinrpt(
							minOccur);

				
			} else if ("maxOccurs".equals(attribute.getNodeName())) {
				try {
					maxOccur = Integer.parseInt(attribute.getNodeValue());
					
				} catch (Exception ex) {
					throw new IllegalArgumentException(
							"maxOccurs has to be an integer!");
				}
				if (maxOccur < 0)
					throw new IllegalArgumentException(
							"maxOccurs has to be an integer greater than 0");
				context.getExistingRptGroups().get(
						context.getNewrepeatSeqVal() - 1).setMaxrpt(
						Integer.parseInt(attribute.getNodeValue()));
			}else if ("deleteLabel".equals(attribute.getNodeName())) {
				context.getExistingRptGroups().get(
						context.getNewrepeatSeqVal() - 1).setDellabel(
						attribute.getNodeValue());
			}
			
		}
		
		if(context.getExistingRptGroups().get(
				context.getNewrepeatSeqVal() - 1).getMaxrpt()<context.getExistingRptGroups().get(
						context.getNewrepeatSeqVal() - 1).getMinrpt()){
			throw new IllegalArgumentException(
			"maxOccurs has to be greater than minOccurs!");
		}
		
		String replacement = getStartSubstitution(session);
		out.print(replacement);

		return true;
	}

	private String getStartSubstitution(FormEntrySession session) {
		MultipleElement nre = new MultipleElement();
		return nre.generateStartHtml(session.getContext());
	}

	private String getEndSubstitution(FormEntrySession session) {
		MultipleElement nre = new MultipleElement();
		return nre.generateEndHtml(session.getContext());

	}

}
